#!/usr/bin/python
"""sal-submit

Coordinates running checkin modules and submitting their results to Sal.
"""


import argparse
import logging
import json
import os
import stat
import subprocess
import sys
import tempfile
import time

sys.path.insert(0, '/usr/local/munki')
from munkilib import FoundationPlist, munkicommon
sys.path.insert(0, '/usr/local/sal')
import utils


CHECKIN_MODULES_DIR = '/usr/local/sal/checkin_modules'


def main():
    logging.basicConfig(
        level=get_log_level(), format='%(asctime)s %(levelname)s %(message)s')
    logging.info("%s Version: %s", os.path.basename(__file__), utils.sal_version())

    exit_if_not_root()
    if utils.python_script_running('sal-submit'):
        sys.exit('Another instance of sal-submit is already running. Exiting.')
    time.sleep(1)
    if utils.python_script_running('managedsoftwareupdate'):
        sys.exit('managedsoftwareupdate is running. Exiting.')

    logging.info('Processing checkin modules...')
    script_results = utils.run_scripts(CHECKIN_MODULES_DIR)
    for message in script_results:
        logging.debug(message)

    submission = utils.get_checkin_results()
    run_type = get_run_type(submission)
    run_plugins(run_type)

    remove_skipped_facts()

    server_url, _, machine_group_key = utils.get_server_prefs()
    if logging.getLogger().level <= 10:
        submission = utils.get_checkin_results()
        logging.debug('Checkin submission:')
        logging.debug(json.dumps(submission, indent=4, default=utils.serializer))
    _, errors = send_checkin(server_url)

    if not errors:
        utils.clean_results()

    # Speed up manual runs by skipping these potentially slow-running,
    # and infrequently changing tasks.
    if run_type != 'manual':
        send_inventory(server_url, submission['machine']['serial'])
        send_catalogs(server_url, machine_group_key)
        send_profiles(server_url, submission['machine']['serial'])

    touchfile = '/Users/Shared/.com.salopensource.sal.run'
    if os.path.exists(touchfile):
        os.remove(touchfile)

    logging.info('Checkin complete.')


def get_log_level():
    """Set the verbosity based on options."""
    loglevel = logging.CRITICAL
    args = get_args()
    if args.debug:
        loglevel = logging.DEBUG
    elif args.verbose:
        loglevel = logging.INFO
    return loglevel


def get_args():
    """Return commandline options."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-d", "--debug", default=False, action="store_true", help="Enable full debug output.")
    parser.add_argument(
        "-v", "--verbose", default=False, action="store_true", help="Enable verbose output.")
    return parser.parse_args()


def exit_if_not_root():
    """Exit if the executing user is not root."""
    uid = os.geteuid()
    if uid != 0:
        sys.exit("Manually running this script requires sudo.")


def get_run_type(submission):
    munki = submission.get('Munki', {})
    return munki['runtype']


def run_plugins(run_type):
    logging.info('Processing plugins...')
    plugin_results_path = '/usr/local/sal/plugin_results.plist'
    try:
        run_external_scripts(run_type)
        plugin_results = get_plugin_results(plugin_results_path)
    finally:
        if os.path.exists(plugin_results_path):
            os.remove(plugin_results_path)
    utils.set_checkin_results('plugin_results', plugin_results)


def run_external_scripts(run_type):
    external_scripts_dir = '/usr/local/sal/external_scripts'

    if os.path.exists(external_scripts_dir):
        for root, _, files in os.walk(external_scripts_dir, topdown=False):
            for script in files:
                script_path = os.path.join(root, script)

                script_stat = os.stat(script_path)
                executable = script_stat.st_mode & stat.S_IXUSR
                if executable:
                    try:
                        subprocess.check_call(
                            [script_path, run_type], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                        logging.debug("%s ran successfuly.", script_path)
                    except OSError:
                        logging.warning("Couldn't run %s", script_path)
                    except subprocess.CalledProcessError:
                        logging.warning("%s had errors during execution!", script_path)
                else:
                    logging.warning("'%s' is not executable! Skipping.", script_path)


def get_plugin_results(plugin_results_plist):
    """ Read external data plist if it exists and return a dict."""
    results = []
    if os.path.exists(plugin_results_plist):
        try:
            plist_data = FoundationPlist.readPlist(plugin_results_plist)
        except FoundationPlist.FoundationPlistException:
            logging.warning('Could not read external data plist.')
            return results

        results = utils.unobjctify(plist_data)

    else:
        logging.warning('No external data plist found.')

    return results


def remove_skipped_facts():
    skip_facts = utils.pref('SkipFacts')
    if skip_facts:
        update = False
        submission = utils.get_checkin_results()

        for results in submission.values():
            if not isinstance(results, dict):
                # Handle any non-dict keys like plugin_results
                continue

            removals = []
            for fact in results.get('facts', []):
                if fact in skip_facts:
                    removals.append(fact)

            if removals:
                update = True
                for removal in removals:
                    logging.debug("Removing fact: '%s'", removal)
                    results['facts'].pop(removal)

        if update:
            utils.save_results(submission)


def send_checkin(server_url):
    checkinurl = os.path.join(server_url, 'checkin', '')
    logging.debug("Checkin Response:")
    out, error = utils.send_report(checkinurl, json_path=utils.RESULTS_PATH)
    log(out, error)
    return out, error


def log(out, error):
    if out:
        logging.debug(out.strip())
    if error:
        logging.debug(error.strip())


def send_inventory(server_url, serial):
    logging.info('Processing inventory...')
    hash_url = os.path.join(server_url, 'inventory/hash', serial, '')
    inventory_submit_url = os.path.join(server_url, 'inventory/submit', '')

    managed_install_dir = munkicommon.pref('ManagedInstallDir')
    inventory_plist = os.path.join(managed_install_dir, 'ApplicationInventory.plist')
    logging.debug('ApplicationInventory.plist Path: %s', inventory_plist)

    inventory, inventory_hash = utils.get_file_and_hash(inventory_plist)
    if inventory:
        serverhash = None
        serverhash, stderr = utils.curl(hash_url)
        if stderr:
            return
        if serverhash != inventory_hash or True:
            logging.info("Inventory is out of date; submitting...")
            inventory_submission = {
                'serial': serial,
                'base64bz2inventory': utils.submission_encode(inventory)}
            logging.debug("Inventory report response:")
            out, error = utils.send_report(inventory_submit_url, form_data=inventory_submission)
            log(out, error)


def send_catalogs(server_url, machine_group_key):
    logging.info('Processing catalogs...')
    hash_url = os.path.join(server_url, 'catalog/hash', '')
    catalog_submit_url = os.path.join(server_url, 'catalog/submit', '')
    managed_install_dir = munkicommon.pref('ManagedInstallDir')
    catalog_dir = os.path.join(managed_install_dir, 'catalogs')

    check_list = []
    if os.path.exists(catalog_dir):
        for catalog_file in os.listdir(catalog_dir):
            # don't operate on hidden files (.DS_Store etc)
            if not catalog_file.startswith('.'):
                _, catalog_hash = utils.get_file_and_hash(catalog_file)
                check_list.append({'name': catalog_file, 'sha256hash': catalog_hash})

        catalog_check_plist = FoundationPlist.writePlistToString(check_list)

    hash_submission = {
        'key': machine_group_key,
        'catalogs': utils.submission_encode(catalog_check_plist)}
    response, stderr = utils.send_report(hash_url, form_data=hash_submission)

    if stderr is not None:
        try:
            remote_data = FoundationPlist.readPlistFromString(response)
        except FoundationPlist.NSPropertyListSerializationException:
            remote_data = {}

        for catalog in check_list:
            if catalog not in remote_data:
                contents, _ = utils.get_file_and_hash(os.path.join(catalog_dir, catalog['name']))
                catalog_submission = {
                    'key': machine_group_key,
                    'base64bz2catalog': utils.submission_encode(contents),
                    'name': catalog['name'],
                    'sha256hash': catalog['sha256hash']}

                logging.debug("Submitting Catalog: %s", catalog['name'])
                try:
                    out, error = utils.send_report(catalog_submit_url, form_data=catalog_submission)
                    log(out, error)
                except OSError:
                    logging.warning("Error while submitting Catalog: %s", catalog['name'])


def send_profiles(server_url, serial):
    logging.info('Processing profiles...')
    profile_submit_url = os.path.join(server_url, 'profiles/submit', '')

    temp_dir = tempfile.mkdtemp()
    profile_out = os.path.join(temp_dir, 'profiles.plist')

    cmd = ['/usr/bin/profiles', '-C', '-o', profile_out]
    dev_null = open(os.devnull, 'w')
    try:
        subprocess.call(cmd, stdout=dev_null)
    except OSError:
        logging.warning("Couldn't output profiles.")
        return

    profiles, _ = utils.get_file_and_hash(profile_out)

    os.remove(profile_out)

    profile_submission = {
        'serial': serial,
        'base64bz2profiles': utils.submission_encode(profiles)}

    logging.debug("Profiles Response:")
    out, error = utils.send_report(profile_submit_url, form_data=profile_submission)
    log(out, error)


if __name__ == "__main__":
    main()
